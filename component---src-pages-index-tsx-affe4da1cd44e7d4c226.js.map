{"version":3,"file":"component---src-pages-index-tsx-affe4da1cd44e7d4c226.js","mappings":"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","sources":["webpack://gatsby-starter-default/./src/components/Main/PostItem.tsx","webpack://gatsby-starter-default/./src/hooks/useInfiniteScroll.tsx","webpack://gatsby-starter-default/./src/components/Main/PostList.tsx","webpack://gatsby-starter-default/./src/pages/index.tsx"],"sourcesContent":["import React, { FunctionComponent } from 'react'\nimport styled from '@emotion/styled'\nimport { Link } from 'gatsby'\nimport { PostFrontmatterType } from 'types/PostItem.types'\nimport { GatsbyImage } from 'gatsby-plugin-image'\n\n\n\nconst PostItemWrapper = styled(Link)`\n  display: flex;\n  flex-direction: column;\n  border-radius: 10px;\n  box-shadow: 0 0 8px rgba(0, 0, 0, 0.15);\n  transition: 0.3s box-shadow;\n  cursor: pointer;\n\n  &:hover {\n    box-shadow: 0 0 10px rgba(0, 0, 0, 0.3);\n  }\n`\n\nconst ThumbnailImage = styled(GatsbyImage)`\n  width: 100%;\n  height: 200px;\n  border-radius: 10px 10px 0 0;\n`\n\nconst PostItemContent = styled.div`\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  padding: 15px;\n`\n\nconst Title = styled.div`\n  display: -webkit-box;\n  overflow: hidden;\n  margin-bottom: 3px;\n  text-overflow: ellipsis;\n  white-space: normal;\n  overflow-wrap: break-word;\n  -webkit-line-clamp: 2;\n  -webkit-box-orient: vertical;\n  font-size: 20px;\n  font-weight: 700;\n`\n\nconst Date = styled.div`\n  font-size: 14px;\n  font-weight: 400;\n  opacity: 0.7;\n`\n\nconst Category = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  margin-top: 10px;\n  margin: 10px -5px;\n`\n\nconst CategoryItem = styled.div`\n  margin: 2.5px 5px;\n  padding: 3px 5px;\n  border-radius: 3px;\n  background: black;\n  font-size: 14px;\n  font-weight: 700;\n  color: white;\n`\n\nconst Summary = styled.div`\n  display: -webkit-box;\n  overflow: hidden;\n  margin-top: auto;\n  text-overflow: ellipsis;\n  white-space: normal;\n  overflow-wrap: break-word;\n  -webkit-line-clamp: 2;\n  -webkit-box-orient: vertical;\n  font-size: 16px;\n  opacity: 0.8;\n`\n\ntype PostItemProps = PostFrontmatterType & { link: string }\n\nconst PostItem: FunctionComponent<PostItemProps> = function ({\n  title,\n  date,\n  categories,\n  summary,\n  thumbnail: {\n    childImageSharp: { gatsbyImageData },\n  },\n  link,\n}) {\n  return (\n    <PostItemWrapper to={link}>\n      <ThumbnailImage image={gatsbyImageData} alt=\"Post Item Image\" />\n\n      <PostItemContent>\n        <Title>{title}</Title>\n        <Date>{date}</Date>\n        <Category>\n          {categories.map(item => (\n            <CategoryItem key={item}>{item}</CategoryItem>\n          ))}\n        </Category>\n        <Summary>{summary}</Summary>\n      </PostItemContent>\n    </PostItemWrapper>\n  )\n}\n  \n  export default PostItem","import { MutableRefObject, useState, useEffect, useRef, useMemo } from 'react'\nimport { PostListItemType } from 'types/PostItem.types'\n\nexport type useInfiniteScrollType = {\n  containerRef: MutableRefObject<HTMLDivElement | null>\n  postList: PostListItemType[]\n}\n\nconst NUMBER_OF_ITEMS_PER_PAGE = 10\n\nconst useInfiniteScroll = function (\n  selectedCategory: string,\n  posts: PostListItemType[],\n): useInfiniteScrollType {\n  const containerRef: MutableRefObject<HTMLDivElement | null> = useRef<HTMLDivElement>(\n    null,\n  )\n  const [count, setCount] = useState<number>(1)\n\n  const postListByCategory = useMemo<PostListItemType[]>(\n    () =>\n      posts.filter(({ node: { frontmatter: { categories } } }: PostListItemType) =>\n        selectedCategory !== 'All'\n          ? categories.includes(selectedCategory)\n          : true,\n      ),\n    [selectedCategory],\n  )\n\n  const observer = useRef<IntersectionObserver | null>(null);\n\n  useEffect(() => {\n    observer.current = new IntersectionObserver(\n      (entries, observer) => {\n        if (!entries[0].isIntersecting) return;\n\n        setCount(value => value + 1);\n        observer.disconnect();\n      },\n    )\n  }, []);\n\n  useEffect(() => setCount(1), [selectedCategory])\n\n  useEffect(() => {\n    if (\n      NUMBER_OF_ITEMS_PER_PAGE * count >= postListByCategory.length ||\n      containerRef.current === null ||\n      containerRef.current.children.length === 0\n    ){\n      return;\n    }\n\n    if(observer && observer.current){\n      observer.current.observe(\n        containerRef.current.children[containerRef.current.children.length - 1],\n      )\n    }\n\n  }, [count, selectedCategory, observer])\n\n  return {\n    containerRef,\n    postList: postListByCategory.slice(0, count * NUMBER_OF_ITEMS_PER_PAGE),\n  }\n}\n\nexport default useInfiniteScroll","import React, { FunctionComponent } from 'react';\nimport styled from '@emotion/styled';\nimport PostItem from 'components/Main/PostItem';\nimport { PostListItemType } from 'types/PostItem.types';\nimport useInfiniteScroll, { useInfiniteScrollType } from 'hooks/useInfiniteScroll';\n\nconst PostListWrapper = styled.div`\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n  grid-gap: 20px;\n  width: 876px;\n  margin: 0 auto;\n  padding: 50px 0 100px;\n\n  @media (max-width: 768px) {\n    grid-template-columns: 1fr;\n    width: 100%;\n    padding: 50px 20px;\n  }\n`;\n\ntype PostListProps = {\n  selectedCategory: string;\n  posts: PostListItemType[];\n};\n\nconst PostList: FunctionComponent<PostListProps> = function ({ selectedCategory, posts }) {\n  const { containerRef, postList }: useInfiniteScrollType = useInfiniteScroll(selectedCategory, posts);\n\n  return (\n    <PostListWrapper ref={containerRef}>\n      {postList.map(\n        ({\n          node: {\n            id,\n            fields: { slug },\n            frontmatter,\n          },\n        }: PostListItemType) => (\n          <PostItem {...frontmatter} link={slug} key={id} />\n        ),\n      )}\n    </PostListWrapper>\n  );\n};\n\nexport default PostList;\n","import React, { FunctionComponent, useMemo } from 'react';\nimport CategoryList, { CategoryListProps } from 'components/Main/CategoryList';\nimport PostList from 'components/Main/PostList';\n\nimport { graphql } from 'gatsby';\nimport { IGatsbyImageData } from 'gatsby-plugin-image';\nimport { PostListItemType } from 'types/PostItem.types';\nimport queryString, { ParsedQuery } from 'query-string';\nimport Template from 'components/Common/Template';\n\ntype IndexPageProps = {\n  location: {\n    search: string;\n  };\n  data: {\n    site: {\n      siteMetadata: {\n        title: string;\n        description: string;\n        siteUrl: string;\n      };\n    };\n    allMarkdownRemark: {\n      edges: PostListItemType[];\n    };\n    file: {\n      childImageSharp: {\n        gatsbyImageData: IGatsbyImageData;\n      };\n      publicURL: string;\n    };\n  };\n};\n\nconst IndexPage: FunctionComponent<IndexPageProps> = function ({\n  location: { search },\n  data: {\n    site: {\n      siteMetadata: { title, description, siteUrl },\n    },\n    allMarkdownRemark: { edges },\n    file: {\n      childImageSharp: { gatsbyImageData },\n      publicURL,\n    },\n  },\n}) {\n  const parsed: ParsedQuery<string> = queryString.parse(search);\n  const selectedCategory: string = typeof parsed.category !== 'string' || !parsed.category ? 'All' : parsed.category;\n\n  const categoryList = useMemo(\n    () =>\n      edges.reduce(\n        (\n          list: CategoryListProps['categoryList'],\n          {\n            node: {\n              frontmatter: { categories },\n            },\n          }: PostListItemType,\n        ) => {\n          categories.forEach((category) => {\n            if (list[category] === undefined) list[category] = 1;\n            else list[category]++;\n          });\n\n          list['All']++;\n\n          return list;\n        },\n        { All: 0 },\n      ),\n    [],\n  );\n\n  const [hasMounted, setHasMounted] = React.useState(false);\n\n  React.useEffect(() => {\n    setHasMounted(true);\n  }, []);\n\n  if (!hasMounted) {\n    return null;\n  } else {\n    return (\n      <div>\n        <Template\n          title={title}\n          description={description}\n          url={siteUrl}\n          image={publicURL}\n          profileImage={gatsbyImageData}\n        >\n          <CategoryList selectedCategory={selectedCategory} categoryList={categoryList} />\n          <PostList selectedCategory={selectedCategory} posts={edges} />\n        </Template>\n      </div>\n    );\n  }\n};\n\nexport default IndexPage;\n\nexport const getPostList = graphql`\n  query getPostList {\n    site {\n      siteMetadata {\n        title\n        description\n        siteUrl\n      }\n    }\n    allMarkdownRemark(sort: { order: DESC, fields: [frontmatter___date, frontmatter___title] }) {\n      edges {\n        node {\n          id\n          fields {\n            slug\n          }\n          frontmatter {\n            title\n            summary\n            date(formatString: \"YYYY.MM.DD.\")\n            categories\n            thumbnail {\n              childImageSharp {\n                gatsbyImageData(width: 768, height: 400)\n              }\n            }\n          }\n        }\n      }\n    }\n    file(name: { eq: \"profile-image\" }) {\n      childImageSharp {\n        gatsbyImageData(width: 120, height: 120)\n      }\n      publicURL\n    }\n  }\n`;\n"],"names":["PostItemWrapper","_styled","Link","process","ThumbnailImage","GatsbyImage","PostItemContent","Title","Date","Category","CategoryItem","Summary","title","date","categories","summary","gatsbyImageData","thumbnail","childImageSharp","link","___EmotionJSX","to","image","alt","map","item","key","selectedCategory","posts","containerRef","useRef","useState","count","setCount","postListByCategory","useMemo","filter","node","frontmatter","includes","observer","useEffect","current","IntersectionObserver","entries","isIntersecting","value","disconnect","length","children","observe","postList","slice","PostListWrapper","useInfiniteScroll","ref","id","slug","fields","PostItem","search","location","data","site","siteMetadata","description","siteUrl","edges","allMarkdownRemark","file","publicURL","parsed","queryString","category","categoryList","reduce","list","forEach","undefined","All","React","hasMounted","setHasMounted","Template","url","profileImage","CategoryList","PostList"],"sourceRoot":""}