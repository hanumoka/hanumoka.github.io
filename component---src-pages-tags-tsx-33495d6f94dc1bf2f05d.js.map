{"version":3,"file":"component---src-pages-tags-tsx-33495d6f94dc1bf2f05d.js","mappings":"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","sources":["webpack://gatsby-starter-default/./src/components/Main/CategoryList2.tsx","webpack://gatsby-starter-default/./src/pages/tags.tsx"],"sourcesContent":["// @ts-nocheck\nimport React, { FunctionComponent, ReactNode, useEffect, useMemo } from 'react';\nimport styled from '@emotion/styled';\nimport { Link } from 'gatsby';\n\nexport type CategoryList2Props = {\n  categoryList: {\n    [key: string]: number;\n  };\n};\n\ntype CategoryItemProps = {\n  active: boolean;\n};\n\ntype GatsbyLinkProps = {\n  children: ReactNode;\n  className?: string;\n  to: string;\n} & CategoryItemProps;\n\nconst CategoryListWrapper = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  width: 768px;\n  margin: 50px 50px 0;\n\n  @media (max-width: 768px) {\n    width: 100%;\n    margin-top: 25px;\n    padding: 0 20px;\n  }\n`;\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst CategoryItem = styled(({ active, ...props }: GatsbyLinkProps) => <Link {...props} />)<CategoryItemProps>`\n  margin-right: 20px;\n  padding: 5px 0;\n  font-size: 18px;\n  font-weight: ${({ active }) => (active ? '800' : '400')};\n  cursor: pointer;\n\n  &:last-of-type {\n    margin-right: 0;\n  }\n\n  @media (max-width: 768px) {\n    font-size: 15px;\n  }\n`;\n\nconst descending = (a: string, b: string) => {\n  var a = a.toString();\n  var b = b.toString();\n  return b.localeCompare(a);\n};\n\nconst CategoryList2: FunctionComponent<CategoryList2Props> = function ({ categoryList }) {\n  const tags = useMemo(() => {\n    return Object.entries(categoryList)\n      .map((tag) => {\n        return { name: tag[0].toUpperCase(), count: tag[1] };\n      })\n      .sort((a, b) => {\n        return a.name < b.name ? -1 : a.name > b.name ? 1 : 0;\n      })\n      .sort((a, b) => {\n        if (a.name === 'ALL') return -1;\n        else return 1;\n      });\n  }, [categoryList]);\n\n  // useEffect(() => {\n  //   let tags = Object.entries(categoryList)\n  //     .map((tag) => {\n  //       return { name: tag[0].toUpperCase(), count: tag[1] };\n  //     })\n  //     .sort((a, b) => {\n  //       return a.name < b.name ? -1 : a.name > b.name ? 1 : 0;\n  //     })\n  //     .sort((a, b) => {\n  //       if (a.name === 'ALL') return -1;\n  //       else return 1;\n  //     });\n  //   console.log(JSON.stringify(tags));\n  // }, [categoryList]);\n\n  return (\n    <>\n      {/* <p className=\"text-4xl\">Tags</p> */}\n      <div>\n        <CategoryListWrapper>\n          {tags\n            .filter((tag) => tag.name === 'ALL')\n            .map((tag) => (\n              <CategoryItem to={`/?category=${tag.name}`} active={false} key={tag.name}>\n                #{tag.name}({tag.count})\n              </CategoryItem>\n            ))}\n        </CategoryListWrapper>\n      </div>\n      <div>\n        <CategoryListWrapper>\n          {tags\n            .filter((tag) => tag.name !== 'ALL' && /^[a-z|A-Z]+$/.test(tag.name))\n            .map((tag) => (\n              <CategoryItem to={`/?category=${tag.name}`} active={false} key={tag.name}>\n                #{tag.name}({tag.count})\n              </CategoryItem>\n            ))}\n        </CategoryListWrapper>\n      </div>\n      <div>\n        <CategoryListWrapper>\n          {tags\n            .filter((tag) => tag.name !== 'ALL' && /^[ㄱ-ㅎ|가-힣]+$/.test(tag.name))\n            .map((tag) => (\n              <CategoryItem to={`/?category=${tag.name}`} active={false} key={tag.name}>\n                #{tag.name}({tag.count})\n              </CategoryItem>\n            ))}\n        </CategoryListWrapper>\n      </div>\n      <div>\n        <CategoryListWrapper>\n          {tags\n            .filter((tag) => tag.name !== 'ALL' && !/^[a-z|A-Z|ㄱ-ㅎ|가-힣]+$/.test(tag.name))\n            .map((tag) => (\n              <CategoryItem to={`/?category=${tag.name}`} active={false} key={tag.name}>\n                #{tag.name}({tag.count})\n              </CategoryItem>\n            ))}\n        </CategoryListWrapper>\n      </div>\n    </>\n  );\n};\n\nexport default CategoryList2;\n","// @ts-nocheck\n\nimport React, { FunctionComponent, useMemo } from 'react';\nimport CategoryList2, { CategoryList2Props } from 'components/Main/CategoryList2';\n\nimport { graphql } from 'gatsby';\nimport { IGatsbyImageData } from 'gatsby-plugin-image';\nimport { PostListItemType } from 'types/PostItem.types';\nimport queryString, { ParsedQuery } from 'query-string';\nimport Template from 'components/Common/Template';\n\ntype TagsPageProps = {\n  location: {\n    search: string;\n  };\n  data: {\n    site: {\n      siteMetadata: {\n        title: string;\n        description: string;\n        siteUrl: string;\n      };\n    };\n    allMarkdownRemark: {\n      edges: PostListItemType[];\n    };\n    file: {\n      childImageSharp: {\n        gatsbyImageData: IGatsbyImageData;\n      };\n      publicURL: string;\n    };\n  };\n};\n\nconst IndexPage: FunctionComponent<TagsPageProps> = function ({\n  location: { search },\n  data: {\n    site: {\n      siteMetadata: { title, description, siteUrl },\n    },\n    allMarkdownRemark: { edges },\n    file: {\n      childImageSharp: { gatsbyImageData },\n      publicURL,\n    },\n  },\n}) {\n  const parsed: ParsedQuery<string> = queryString.parse(search);\n  const selectedCategory: string = typeof parsed.category !== 'string' || !parsed.category ? 'All' : parsed.category;\n\n  const categoryList = useMemo(\n    () =>\n      edges.reduce(\n        (\n          list: CategoryList2Props['categoryList'],\n          {\n            node: {\n              frontmatter: { categories },\n            },\n          }: PostListItemType,\n        ) => {\n          categories.forEach((category) => {\n            if (list[category] === undefined) list[category] = 1;\n            else list[category]++;\n          });\n\n          list['All']++;\n\n          return list;\n        },\n        { All: 0 },\n      ),\n    [],\n  );\n\n  const [hasMounted, setHasMounted] = React.useState(false);\n\n  React.useEffect(() => {\n    setHasMounted(true);\n  }, []);\n\n  if (!hasMounted) {\n    return null;\n  } else {\n    return (\n      <div>\n        <Template\n          title={title}\n          description={description}\n          url={siteUrl}\n          image={publicURL}\n          profileImage={gatsbyImageData}\n        >\n          <CategoryList2 selectedCategory={selectedCategory} categoryList={categoryList} />\n        </Template>\n      </div>\n    );\n  }\n};\n\nexport default IndexPage;\n\nexport const getPostList = graphql`\n  query getPostList {\n    site {\n      siteMetadata {\n        title\n        description\n        siteUrl\n      }\n    }\n    allMarkdownRemark(sort: { order: DESC, fields: [frontmatter___date, frontmatter___title] }) {\n      edges {\n        node {\n          id\n          fields {\n            slug\n          }\n          frontmatter {\n            title\n            summary\n            date(formatString: \"YYYY.MM.DD.\")\n            categories\n            thumbnail {\n              childImageSharp {\n                gatsbyImageData(width: 768, height: 400)\n              }\n            }\n          }\n        }\n      }\n    }\n    file(name: { eq: \"profile-image\" }) {\n      childImageSharp {\n        gatsbyImageData(width: 120, height: 120)\n      }\n      publicURL\n    }\n  }\n`;\n"],"names":["CategoryListWrapper","target","name","styles","CategoryItem","_styled","active","props","___EmotionJSX","Link","categoryList","tags","useMemo","Object","entries","map","tag","toUpperCase","count","sort","a","b","filter","to","key","test","search","location","data","site","siteMetadata","title","description","siteUrl","edges","allMarkdownRemark","file","gatsbyImageData","childImageSharp","publicURL","parsed","queryString","selectedCategory","category","reduce","list","node","frontmatter","categories","forEach","undefined","All","React","hasMounted","setHasMounted","Template","url","image","profileImage","CategoryList2"],"sourceRoot":""}