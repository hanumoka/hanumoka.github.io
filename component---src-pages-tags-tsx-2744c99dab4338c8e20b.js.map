{"version":3,"file":"component---src-pages-tags-tsx-2744c99dab4338c8e20b.js","mappings":"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","sources":["webpack://gatsby-starter-default/./src/components/Main/CategoryList2.tsx","webpack://gatsby-starter-default/./src/components/Common/Search.tsx","webpack://gatsby-starter-default/./src/pages/tags.tsx"],"sourcesContent":["// @ts-nocheck\nimport React, { FunctionComponent, ReactNode, useEffect, useMemo } from 'react';\nimport styled from '@emotion/styled';\nimport { Link } from 'gatsby';\n\nexport type CategoryList2Props = {\n  categoryList: {\n    [key: string]: number;\n  };\n};\n\ntype CategoryItemProps = {\n  active: boolean;\n};\n\ntype GatsbyLinkProps = {\n  children: ReactNode;\n  className?: string;\n  to: string;\n} & CategoryItemProps;\n\nconst CategoryListWrapper = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  width: 768px;\n  margin: 50px 50px 0;\n\n  @media (max-width: 768px) {\n    width: 100%;\n    margin-top: 25px;\n    padding: 0 20px;\n  }\n`;\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst CategoryItem = styled(({ active, ...props }: GatsbyLinkProps) => <Link {...props} />)<CategoryItemProps>`\n  margin-right: 20px;\n  padding: 5px 0;\n  font-size: 18px;\n  font-weight: ${({ active }) => (active ? '800' : '400')};\n  cursor: pointer;\n\n  &:last-of-type {\n    margin-right: 0;\n  }\n\n  @media (max-width: 768px) {\n    font-size: 15px;\n  }\n`;\n\nconst descending = (a: string, b: string) => {\n  var a = a.toString();\n  var b = b.toString();\n  return b.localeCompare(a);\n};\n\nconst CategoryList2: FunctionComponent<CategoryList2Props> = function ({ categoryList }) {\n  const tags = useMemo(() => {\n    return Object.entries(categoryList)\n      .map((tag) => {\n        return { name: tag[0], count: tag[1] };\n        // return { name: tag[0].toUpperCase(), count: tag[1] };\n      })\n      .sort((a, b) => {\n        return a.name < b.name ? -1 : a.name > b.name ? 1 : 0;\n      })\n      .sort((a, b) => {\n        if (a.name === 'ALL') return -1;\n        else return 1;\n      });\n  }, [categoryList]);\n\n  return (\n    <>\n      {/* <p className=\"text-4xl\">Tags</p> */}\n      <div>\n        <CategoryListWrapper>\n          {tags\n            .filter((tag) => tag.name === 'All')\n            .map((tag) => (\n              <CategoryItem to={`/?category=${tag.name}`} active={false} key={tag.name}>\n                #{tag.name}({tag.count})\n              </CategoryItem>\n            ))}\n        </CategoryListWrapper>\n      </div>\n      <div>\n        <CategoryListWrapper>\n          {tags\n            .filter((tag) => tag.name !== 'All' && /^[a-z|A-Z]+$/.test(tag.name))\n            .map((tag) => (\n              <CategoryItem to={`/?category=${tag.name}`} active={false} key={tag.name}>\n                #{tag.name}({tag.count})\n              </CategoryItem>\n            ))}\n        </CategoryListWrapper>\n      </div>\n      <div>\n        <CategoryListWrapper>\n          {tags\n            .filter((tag) => tag.name !== 'All' && /^[ㄱ-ㅎ|가-힣]+$/.test(tag.name))\n            .map((tag) => (\n              <CategoryItem to={`/?category=${tag.name}`} active={false} key={tag.name}>\n                #{tag.name}({tag.count})\n              </CategoryItem>\n            ))}\n        </CategoryListWrapper>\n      </div>\n      <div>\n        <CategoryListWrapper>\n          {tags\n            .filter((tag) => tag.name !== 'All' && !/^[a-z|A-Z|ㄱ-ㅎ|가-힣]+$/.test(tag.name))\n            .map((tag) => (\n              <CategoryItem to={`/?category=${tag.name}`} active={false} key={tag.name}>\n                #{tag.name}({tag.count})\n              </CategoryItem>\n            ))}\n        </CategoryListWrapper>\n      </div>\n    </>\n  );\n};\n\nexport default CategoryList2;\n","//@ts-nocheck\n\nimport { AppContext } from '../../context/app';\nimport { graphql, useStaticQuery } from 'gatsby';\nimport * as React from 'react';\nimport { useGatsbyPluginFusejs } from 'react-use-fusejs';\n\nconst Search = ({ searchQuery, setSearchQuery }) => {\n  const data = useStaticQuery(graphql`\n    {\n      fusejs {\n        publicUrl\n      }\n    }\n  `);\n\n  const [query, setQuery] = React.useState('');\n  const { fusejs, setFusejs } = React.useContext(AppContext);\n  const result = useGatsbyPluginFusejs(query, fusejs);\n\n  const fetching = React.useRef(false);\n\n  React.useEffect(() => {\n    if (!fetching.current && !fusejs && query) {\n      fetching.current = true;\n\n      fetch(data.fusejs.publicUrl)\n        .then((res) => res.json())\n        .then((json) => setFusejs(json));\n    }\n  }, [fusejs, query]);\n\n  return (\n    <div>\n      <label for=\"default-search\" className=\"mb-2 text-sm font-medium text-gray-900 sr-only dark:text-white\">\n        Search\n      </label>\n      <div className=\"relative\">\n        <input\n          value={query}\n          onChange={(e) => setQuery(e.target.value)}\n          type=\"search\"\n          id=\"default-search\"\n          className=\"block w-full p-4 pl-10 text-sm text-gray-900 border border-gray-300 rounded-lg bg-gray-50 focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500\"\n          placeholder=\"검색어를 입력... 태그는 검색안됨\"\n        />\n        <ul>\n          {result.map(({ item }) => (\n            <li key={item.id}>{item.title}</li>\n          ))}\n        </ul>\n      </div>\n    </div>\n  );\n};\n\nexport default Search;\n","// @ts-nocheck\n\nimport React, { FunctionComponent, useMemo } from 'react';\nimport CategoryList2, { CategoryList2Props } from 'components/Main/CategoryList2';\n\nimport { graphql, useStaticQuery } from 'gatsby';\nimport { IGatsbyImageData } from 'gatsby-plugin-image';\nimport { PostListItemType } from 'types/PostItem.types';\nimport queryString, { ParsedQuery } from 'query-string';\nimport Template from 'components/Common/Template';\nimport Search from 'components/Common/Search';\n\ntype TagsPageProps = {\n  location: {\n    search: string;\n  };\n  data: {\n    site: {\n      siteMetadata: {\n        title: string;\n        description: string;\n        siteUrl: string;\n      };\n    };\n    allMarkdownRemark: {\n      edges: PostListItemType[];\n    };\n    file: {\n      childImageSharp: {\n        gatsbyImageData: IGatsbyImageData;\n      };\n      publicURL: string;\n    };\n  };\n};\n\nconst IndexPage: FunctionComponent<TagsPageProps> = function ({\n  location: { search },\n  data: {\n    site: {\n      siteMetadata: { title, description, siteUrl },\n    },\n    allMarkdownRemark: { edges },\n    file: {\n      childImageSharp: { gatsbyImageData },\n      publicURL,\n    },\n  },\n}) {\n  const parsed: ParsedQuery<string> = queryString.parse(search);\n  const selectedCategory: string = typeof parsed.category !== 'string' || !parsed.category ? 'All' : parsed.category;\n\n  const categoryList = useMemo(\n    () =>\n      edges.reduce(\n        (\n          list: CategoryList2Props['categoryList'],\n          {\n            node: {\n              frontmatter: { categories },\n            },\n          }: PostListItemType,\n        ) => {\n          categories.forEach((category) => {\n            if (list[category] === undefined) list[category] = 1;\n            else list[category]++;\n          });\n\n          list['All']++;\n\n          return list;\n        },\n        { All: 0 },\n      ),\n    [],\n  );\n\n  const [hasMounted, setHasMounted] = React.useState(false);\n\n  React.useEffect(() => {\n    setHasMounted(true);\n  }, []);\n\n  if (!hasMounted) {\n    return null;\n  } else {\n    return (\n      <div>\n        <Template\n          title={title}\n          description={description}\n          url={siteUrl}\n          image={publicURL}\n          profileImage={gatsbyImageData}\n        >\n          <Search />\n          <CategoryList2 selectedCategory={selectedCategory} categoryList={categoryList} />\n        </Template>\n      </div>\n    );\n  }\n};\n\nexport default IndexPage;\n\nexport const getPostList = graphql`\n  query getPostList {\n    site {\n      siteMetadata {\n        title\n        description\n        siteUrl\n      }\n    }\n    allMarkdownRemark(sort: { order: DESC, fields: [frontmatter___date, frontmatter___title] }) {\n      edges {\n        node {\n          id\n          fields {\n            slug\n          }\n          frontmatter {\n            title\n            summary\n            date(formatString: \"YYYY.MM.DD.\")\n            categories\n            thumbnail {\n              childImageSharp {\n                gatsbyImageData(width: 768, height: 400)\n              }\n            }\n          }\n        }\n      }\n    }\n    file(name: { eq: \"profile-image\" }) {\n      childImageSharp {\n        gatsbyImageData(width: 120, height: 120)\n      }\n      publicURL\n    }\n  }\n`;\n"],"names":["CategoryListWrapper","target","name","styles","CategoryItem","_styled","active","props","___EmotionJSX","Link","categoryList","tags","useMemo","Object","entries","map","tag","count","sort","a","b","filter","to","key","test","searchQuery","setSearchQuery","data","useStaticQuery","React","query","setQuery","AppContext","fusejs","setFusejs","result","useGatsbyPluginFusejs","fetching","current","fetch","publicUrl","then","res","json","for","className","value","onChange","e","type","id","placeholder","item","title","search","location","site","siteMetadata","description","siteUrl","edges","allMarkdownRemark","file","gatsbyImageData","childImageSharp","publicURL","parsed","queryString","selectedCategory","category","reduce","list","node","frontmatter","categories","forEach","undefined","All","hasMounted","setHasMounted","Template","url","image","profileImage","Search","CategoryList2"],"sourceRoot":""}